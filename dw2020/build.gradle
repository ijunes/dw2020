apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
//apply plugin: 'spoon'
apply plugin: 'robolectric'

def devBuildName = "dev"
def releaseBuildName = "release"

def profileRootSrc = projectDir.toString() + File.separator + "src" +File.separator + "main" + File.separator + "profiles"
def devRootSrc = profileRootSrc + File.separator + devBuildName
def releaseRootSrc = profileRootSrc + File.separator + releaseBuildName

def resPath = File.separator + "res"
def resourcesPath = File.separator + "resources"
def assetsPath = File.separator + "assets"

println devBuildName + " files at :" + devRootSrc
println releaseBuildName + " files at :" + releaseRootSrc

android {
    compileSdkVersion 21
    buildToolsVersion '21.1.1'

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
        testApplicationId "net.darkwire.test"
        testInstrumentationRunner "net.darkwire.test.util.Runner"
    }
    buildTypes {
        debug {
            packageNameSuffix "."+devBuildName
            versionNameSuffix "-"+devBuildName.toUpperCase()
            debuggable true
            testCoverageEnabled true
        }
        release {
            zipAlign true
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    sourceSets {
        debug {
            resources.srcDirs = [devRootSrc + resourcesPath]
            res.srcDirs = [devRootSrc + resPath]
            assets.srcDirs = [devRootSrc + assetsPath]
        }
        release {
            resources.srcDirs = [releaseRootSrc + resourcesPath]
            res.srcDirs = [releaseRootSrc + resPath]
            assets.srcDirs = [devRootSrc + assetsPath]
        }
        androidTest.setRoot('src/test')
    }
    lintOptions {
        abortOnError false
        disable 'InvalidPackage'
    }
    productFlavors {
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
    }
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
        '../dw2020/src/main/java'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../dw2020/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../dw2020/build/outputs/code-coverage/coverage.ec')

    reports {
        xml.enabled = true
        html.enabled = true
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:+'

    compile 'com.github.tony19:logback-android-classic:1.1.1-2'
    compile 'org.slf4j:slf4j-api:1.7.6'

    compile 'joda-time:joda-time:2.3'
    compile 'com.google.guava:guava:16.0.1'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.fasterxml.jackson.core:jackson-core:2.3.3'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.3.3'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.3.3'

    compile 'com.squareup:otto:1.3.4'

    compile 'com.netflix.rxjava:rxjava-core:0.17.6'
    compile 'com.netflix.rxjava:rxjava-android:0.17.6'

    compile 'com.lmax:disruptor:3.2.1'

    compile 'oauth.signpost:signpost-core:1.2.1.2'
    compile ('oauth.signpost:signpost-commonshttp4:1.2.1.2') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }

    compile 'com.squareup.okhttp:okhttp:1.5.3'
    compile 'com.squareup.picasso:picasso:2.2.0'
    compile 'com.squareup.retrofit:retrofit:1.5.0'
    compile 'com.squareup.retrofit:converter-jackson:1.5.0'
    compile 'com.octo.android.robospice:robospice:1.4.11'
    compile 'com.octo.android.robospice:robospice-retrofit:1.4.11'

    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.nhaarman.listviewanimations:library:2.6.0'
    compile 'com.github.japgolly.android:svg-android:2.0.6'

    compile 'com.jakewharton:butterknife:4.0.1'
    compile 'com.squareup.dagger:dagger:1.2.1'
    provided 'com.squareup.dagger:dagger-compiler:1.2.1'

    // ================== LIBRARIES ======================
    compile fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    // ================== TESTING LIBRARIES ======================
    androidTestCompile 'junit:junit:4.10'
    androidTestCompile 'org.robolectric:robolectric:2.3'
    androidTestCompile 'org.bouncycastle:bcprov-jdk15on:1.50'
    androidTestCompile 'com.jakewharton:butterknife:5.1.0'
}

robolectric {
    // configure the set of classes for JUnit tests
    include '**/*Test.class'
    //exclude '**/espresso/**/*.class'

    // configure max heap size of the test JVM
    maxHeapSize = "2048m"
}

